#!/bin/bash

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
  echo "Usage: ./configure [options]"
  echo ""
  echo "available options:"
  echo ""
  echo "  --help                   print this message"
  echo ""
  exit 1
fi

rm -f configure.log
DEVNULL=configure.log

cc_check() {
    rm -f conftest*
    cat > conftest.cpp << EOF
#include $1
int main () { $3 return 0; }
EOF
    echo "	conftest.cpp:" >> $DEVNULL
    cat conftest.cpp >> $DEVNULL
    echo "	$CXX conftest.cpp $CXXFLAGS $LDFLAGS $2 -o conftest" >> $DEVNULL
    $CXX conftest.cpp $CXXFLAGS $LDFLAGS $2 -o conftest 1>>$DEVNULL 2>>$DEVNULL
    TMP="$?"
    rm -f conftest*
    return $TMP
}

func_check() {
  do_echo -n "Checking for $1... "
  if cc_check "$2" "$3" "$4"; then
    do_echo Yes
    return 0
  else
    do_echo No
    return 1
  fi
}

select_tool() {
    toolname=$1
    shift
    echo -n '' > conftest
    for tool in $*; do
      tool_ver="`$tool -dumpversion 2>&1`"
      if test ! "$?" -gt 0; then echo -e "$tool_ver	$tool" >> conftest; fi
    done
    if test -z "`cat conftest`"; then
      echo ""
      echo "Error: Unable to determine a suitable $toolname".
      echo "Configure cannot progress. Try installing $1."
      exit 1
    fi
    cat conftest >> $DEVNULL
    sel_tool="`sort -rn < conftest | head -n 1 | sed 's/.*	//'`"
    sel_ver="`sort -rn < conftest | head -n 1 | sed 's/	.*//'`"
    eval "$toolname"="'$sel_tool'"
    do_echo -n "$toolname=$sel_tool($sel_ver) "
}

do_echo() {
  op=""
  if test x"$1" = x"-n"; then op="$1"; shift; fi
  echo $op "$*"
  echo "$*" >> $DEVNULL
}

cpu_check() {
  do_echo -n "Checking if your CPU supports $1... "
  if grep flags /proc/cpuinfo |sed 's/.*://'|tr ' ' '\012'|grep -q '^'"$2"'$'; then
    if cc_check '<stdio.h>' "$3" 'puts("ok");'; then
      OPTIM="$OPTIM $3"
      do_echo "Yes, using $3"
    else
      do_echo "Yes, but your compiler does not support $3"
      if [ ! "$4" = "" ]; then
        do_echo "But using -D$4 anyway"
        OPTIM="$OPTIM -D$4"
      fi
    fi
  else
    do_echo No
  fi
}

CFLAGS=""
CPPFLAGS=""
LDFLAGS=""
OPTIM=""

do_echo -n "Determining compiler version to use... "
select_tool CXX g++    icc  `(IFS=':'; for s in $PATH;do cd "$s"&&echo g++-*;done) 2>/dev/null`
select_tool CPP cpp    icc `(IFS=':'; for s in $PATH;do cd "$s"&&echo cpp-*;done) 2>/dev/null`
select_tool CC  gcc cc icc `(IFS=':'; for s in $PATH;do cd "$s"&&echo gcc-*;done) 2>/dev/null`
do_echo ""

do_echo -n "Checking if the determined compiler works... "
if cc_check '<stdio.h>' '' 'for(int a=0; a<10;++a) { for(int a=0; a<5;++a) { } } puts("ok");'; then
  do_echo Ok
else
  do_echo No
  do_echo "Error: Configure cannot figure out how to use your compiler."
  do_echo "Please try installing some recent version of gcc."
  exit 1
fi

if [ "$CC" = icc ]; then
  CPPFLAGS="$CPPFLAGS -w1 -inline-level=2"
  #do_echo -n "Checking if your compiler supports -ipo... "
  #if cc_check '<stdio.h>' '-ipo' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
  #  #do_echo Yes
  #  #OPTIM="$OPTIM -ipo"
  #  do_echo "Yes, but not using - causes crash of ICC 11.0"
  #else
  #  do_echo No
  #fi
  
  cat > conftest.cpp << EOF
  int main() { }
EOF
  # Figure out where ICC lives, and by extension, its library paths
  ICC_PATH="`"$CC" -v conftest.cpp 2>&1 | grep mcpcom | head -n 1 | sed 's@/mcpcom.*@@'`"
  # Explicitly add ICC's libs to the LDFLAGS -- shouldn't be needed,
  #  but it is, at least when you're using ICC on a distribution that
  #  isn't supported by Intel, such as Debian on x86_64.
  LDFLAGS="$LDFLAGS -L$ICC_PATH""/lib -lirc -lguide -lpthread -lstdc++"
fi

HAS_OPENMP=0
do_echo -n "Checking if your compiler supports -fopenmp... "
if [ "$CC" = "icc" ] && \
    cc_check '<stdio.h>' '-openmp' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
  do_echo Yes
  do_echo "- Will use OpenMP (-openmp), not checking for -pthread"
  CPPFLAGS="$CPPFLAGS -openmp"
  LDFLAGS="$LDFLAGS -openmp"
  CPPFLAGS="$CPPFLAGS -DUSE_PTHREADS=0"
  HAS_OPENMP=1
elif cc_check '<stdio.h>' '-fopenmp' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
  do_echo Yes
  do_echo "- Will use OpenMP, not checking for -pthread"
  CPPFLAGS="$CPPFLAGS -fopenmp"
  LDFLAGS="$LDFLAGS -fopenmp"
  CPPFLAGS="$CPPFLAGS -DUSE_PTHREADS=0"
  HAS_OPENMP=1
else
  do_echo No
  do_echo -n "Checking if your compiler supports -pthread... "
  if cc_check '"lib/threadfun.hh"' '-pthread' 'ThreadType t;JoinThread(t);'; then
    do_echo Yes
    CPPFLAGS="$CPPFLAGS -DUSE_PTHREADS=1 -pthread"
    LDFLAGS="$LDFLAGS -pthread"
  else
    do_echo No
    CPPFLAGS="$CPPFLAGS -DUSE_PTHREADS=0"
  fi
fi

if [ "$HAS_OPENMP" = "1" ]; then
  do_echo -n "Checking for OpenMP version... "
  rm -f conftest*
  cat > conftest.cpp << EOF
#include <stdio.h>
int main() { printf("%d\n", _OPENMP); return 0; }
EOF
  echo "	conftest.cpp:" >> $DEVNULL
  cat conftest.cpp >> $DEVNULL
  echo "	$CXX conftest.cpp $CXXFLAGS $LDFLAGS -o conftest" >> $DEVNULL
  $CXX conftest.cpp $CXXFLAGS $LDFLAGS -o conftest 1>>$DEVNULL 2>>$DEVNULL
  OPENMP_VERSION="`./conftest`"
  rm -f conftest*
  if [ "$OPENMP_VERSION" = "200805" ]; then
    echo "3.0 ($OPENMP_VERSION)"
  elif [ "$OPENMP_VERSION" = "200505" ]; then
    echo "2.5 ($OPENMP_VERSION)"
  else
    echo "Unknown ($OPENMP_VERSION)"
  fi
fi


do_echo -n "Checking if your compiler supports hash_map... "
if cc_check '"lib/hash.hh"' '-DHASH_MAP=1' 'hash_map<long,int>x; hash_set<long>y;'; then
  do_echo Yes
  CPPFLAGS="$CPPFLAGS -DHASH_MAP=1"
else
  do_echo No
  CPPFLAGS="$CPPFLAGS -DHASH_MAP=0"
fi

do_echo -n "Checking for fuse (dynamic)... "
fusetry="`pkg-config --cflags --libs fuse`"
if cc_check '<fuse_lowlevel.h>' "-DFUSE_USE_VERSION=25 $fusetry" ''; then
  do_echo Yes
else
  do_echo No
  do_echo "Error: Cromfs requires the Fuse userspace libraries."
  do_echo "Please try installing libfuse-dev or fuse-devel."
  exit 1
fi

do_echo -n "Checking for fuse (static)... "
fusetry="`pkg-config --cflags --libs fuse`"
if cc_check '<fuse_lowlevel.h>' "-static -DFUSE_USE_VERSION=25 $fusetry" ''; then
  do_echo Yes
  FUSE_STATIC=1
else
  do_echo No
  do_echo "Note: cromfs-driver-static will not be built, because"
  do_echo "your system does not have a statically linked Fuse library."
  do_echo "You can still use the dynamically linked cromfs-driver."
  FUSE_STATIC=0
fi

do_echo -n "Checking for vsnprintf... "
if cc_check '<cstdio>' '' 'char Buf[10];using namespace std; vsnprintf(Buf,sizeof Buf,"gruu");'; then
  do_echo Yes
  OPTIM="$OPTIM -DHAS_VSNPRINTF"
else
  do_echo No
fi



if func_check stdint.h \
   '<stdint.h>' '' 'typedef int x;'; \
   then OPTIM="$OPTIM -DHAS_STDINT_H"; fi

if func_check inttypes.h \
   '<inttypes.h>' '' 'typedef int x;'; \
   then OPTIM="$OPTIM -DHAS_INTTYPES_H"; fi

if func_check readdir_r \
   '<dirent.h>' '' 'DIR*dir=opendir(".");dirent e,*ep;readdir_r(dir,&e,&ep);'; \
   then OPTIM="$OPTIM -DHAS_READDIR_R"; fi

if func_check uint16_t \
   '<stdint.h>' '' 'typedef uint16_t x;'; \
   then OPTIM="$OPTIM -DHAS_UINT16_T"; fi

if func_check u_int16_t \
   '<stdint.h>' '' 'typedef u_int16_t x;'; \
   then OPTIM="$OPTIM -DHAS_U_INT16_T"; fi

if func_check __uint16_t \
   '<stdint.h>' '' 'typedef _uint16_t x;'; \
   then OPTIM="$OPTIM -DHAS___UINT16_T"; fi

if func_check __uint16_t \
   '<stdint.h>' '' 'typedef long long x;'; \
   then OPTIM="$OPTIM -DHAS_LONG_LONG"; fi

if func_check __uint16_t \
   '<sys/types.h>' '' 'typedef int x;'; \
   then OPTIM="$OPTIM -DHAS_SYS_TYPES_H"; fi

WARNINGS=""
CWARNINGS=""
CXXWARNINGS=""

if [ ! "$CC" = "icc" ]; then
  do_echo -n "Checking if your compiler supports -ftree-vectorize... "
  if cc_check '<stdio.h>' '-ftree-vectorize' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
    do_echo Yes
    OPTIM="$OPTIM -ftree-vectorize"
  else
    do_echo No
  fi
  do_echo -n "Checking if your compiler supports -ffast-math... "
  if cc_check '<stdio.h>' '-ffast-math' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
    do_echo Yes
    OPTIM="$OPTIM -ffast-math"
  else
    do_echo No
  fi
  
  do_echo -n "Checking if your compiler supports -minline-stringops-dynamically... "
  if cc_check '<stdio.h>' '-minline-stringops-dynamically' 'int x,y[100];for(x=0; x<100;++x)y[x]=5;'; then
    do_echo Yes
    OPTIM="$OPTIM -minline-stringops-dynamically"
  else
    do_echo No
  fi
 
  T_WARNINGS="-Wall \
    -Wundef \
    -Wcast-qual \
    -Wpointer-arith \
    -Wconversion \
    -Wwrite-strings \
    -Wsign-compare \
    -Wredundant-decls \
    -Winit-self \
    -Wextra \
    -Wcast-align -Wformat \
    -Wno-conversion"
  T_CWARNINGS="-Waggregate-return -Wshadow -Winline \
    -Wstrict-prototypes \
    -Wmissing-prototypes"
  T_CXXWARNINGS="-Woverloaded-virtual -Weffc++ -Wno-non-virtual-dtor"

  for s in $T_WARNINGS;do
    do_echo -n "Checking if your compiler supports -$s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      WARNINGS="$WARNINGS $s"
    else
      do_echo No
    fi
  done
  for s in $T_CWARNINGS;do
    do_echo -n "Checking if your compiler supports -$s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      CWARNINGS="$CWARNINGS $s"
    else
      do_echo No
    fi
  done
  for s in $T_CXXWARNINGS;do
    do_echo -n "Checking if your compiler supports -$s... "
    if cc_check '<stdio.h>' "$s" ''; then
      do_echo Yes
      CXXWARNINGS="$CXXWARNINGS $s"
    else
      do_echo No
    fi
  done
fi  

cpu_check MMX   mmx   -mmmx   __MMX__
cpu_check 3dnow 3dnow -m3dnow
cpu_check SSE   sse   -msse   __SSE__
cpu_check SSE2  sse2  -msse2  __SSE2__

do_echo "Updating Makefile.sets ..."

DATE="`LC_ALL=C date`"
UNAME="`uname -a`"
sed_cmd=""
for s in CC CPP CXX OPTIM CPPFLAGS LDFLAGS FUSELIBS DATE UNAME WARNINGS CWARNINGS CXXWARNINGS; do
  eval value=\"\$$s\"
  sed_cmd="$sed_cmd;s§{CONFIG_$s}§$value§"
done

sed "$sed_cmd" < Makefile.sets.in > Makefile.sets
echo "FUSE_STATIC=$FUSE_STATIC"  >> Makefile.sets

cp -p Makefile.sets util/
cp -p Makefile.sets  lib/

for dir in . lib util; do
  rm $dir/.depend $dir/.libdepend; make -C $dir .depend
done &> /dev/null
